<?php

namespace DoctrineORMModule\Proxy\__CG__\Admin\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Post extends \Admin\Entity\Post implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Admin\\Entity\\Post' . "\0" . 'id', '' . "\0" . 'Admin\\Entity\\Post' . "\0" . 'nome', '' . "\0" . 'Admin\\Entity\\Post' . "\0" . 'descricao', '' . "\0" . 'Admin\\Entity\\Post' . "\0" . 'conteudo', '' . "\0" . 'Admin\\Entity\\Post' . "\0" . 'dtaInc', '' . "\0" . 'Admin\\Entity\\Post' . "\0" . 'tags', '' . "\0" . 'Admin\\Entity\\Post' . "\0" . 'slug', '' . "\0" . 'Admin\\Entity\\Post' . "\0" . 'categoria', '' . "\0" . 'Admin\\Entity\\Post' . "\0" . 'tag');
        }

        return array('__isInitialized__', '' . "\0" . 'Admin\\Entity\\Post' . "\0" . 'id', '' . "\0" . 'Admin\\Entity\\Post' . "\0" . 'nome', '' . "\0" . 'Admin\\Entity\\Post' . "\0" . 'descricao', '' . "\0" . 'Admin\\Entity\\Post' . "\0" . 'conteudo', '' . "\0" . 'Admin\\Entity\\Post' . "\0" . 'dtaInc', '' . "\0" . 'Admin\\Entity\\Post' . "\0" . 'tags', '' . "\0" . 'Admin\\Entity\\Post' . "\0" . 'slug', '' . "\0" . 'Admin\\Entity\\Post' . "\0" . 'categoria', '' . "\0" . 'Admin\\Entity\\Post' . "\0" . 'tag');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Post $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function toArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', array());

        return parent::toArray();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getNome()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNome', array());

        return parent::getNome();
    }

    /**
     * {@inheritDoc}
     */
    public function setNome($nome)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNome', array($nome));

        return parent::setNome($nome);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescricao()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescricao', array());

        return parent::getDescricao();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescricao($descricao)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescricao', array($descricao));

        return parent::setDescricao($descricao);
    }

    /**
     * {@inheritDoc}
     */
    public function getConteudo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConteudo', array());

        return parent::getConteudo();
    }

    /**
     * {@inheritDoc}
     */
    public function setConteudo($conteudo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConteudo', array($conteudo));

        return parent::setConteudo($conteudo);
    }

    /**
     * {@inheritDoc}
     */
    public function getDtaInc()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDtaInc', array());

        return parent::getDtaInc();
    }

    /**
     * {@inheritDoc}
     */
    public function setDtaInc()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDtaInc', array());

        return parent::setDtaInc();
    }

    /**
     * {@inheritDoc}
     */
    public function getTags()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTags', array());

        return parent::getTags();
    }

    /**
     * {@inheritDoc}
     */
    public function setTags($tags)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTags', array($tags));

        return parent::setTags($tags);
    }

    /**
     * {@inheritDoc}
     */
    public function getSlug()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlug', array());

        return parent::getSlug();
    }

    /**
     * {@inheritDoc}
     */
    public function setSlug($slug)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlug', array($slug));

        return parent::setSlug($slug);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategoria()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategoria', array());

        return parent::getCategoria();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategoria($categoria)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategoria', array($categoria));

        return parent::setCategoria($categoria);
    }

    /**
     * {@inheritDoc}
     */
    public function getTag()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTag', array());

        return parent::getTag();
    }

    /**
     * {@inheritDoc}
     */
    public function setTag($tag)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTag', array($tag));

        return parent::setTag($tag);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTag(\Admin\Entity\Tag $tag)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTag', array($tag));

        return parent::removeTag($tag);
    }

    /**
     * {@inheritDoc}
     */
    public function addTag($tag)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTag', array($tag));

        return parent::addTag($tag);
    }

}
